/* tslint:disable */
/* eslint-disable */
/**
 * FastAPI
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { HTTPValidationError } from '../models';
import { ModelObject } from '../models';
import { Token } from '../models';
/**
 * LoginApi - axios parameter creator
 * @export
 */
export const LoginApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Home
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        homeApiV1Get: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * OAuth2 compatible token login, get an access token for future requests
         * @summary Login Access Token
         * @param {string} grantType 
         * @param {string} username 
         * @param {string} password 
         * @param {string} scope 
         * @param {string} clientId 
         * @param {string} clientSecret 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        loginAccessTokenApiV1LoginAccessTokenPost: async (grantType: string, username: string, password: string, scope: string, clientId: string, clientSecret: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'grantType' is not null or undefined
            if (grantType === null || grantType === undefined) {
                throw new RequiredError('grantType','Required parameter grantType was null or undefined when calling loginAccessTokenApiV1LoginAccessTokenPost.');
            }
            // verify required parameter 'username' is not null or undefined
            if (username === null || username === undefined) {
                throw new RequiredError('username','Required parameter username was null or undefined when calling loginAccessTokenApiV1LoginAccessTokenPost.');
            }
            // verify required parameter 'password' is not null or undefined
            if (password === null || password === undefined) {
                throw new RequiredError('password','Required parameter password was null or undefined when calling loginAccessTokenApiV1LoginAccessTokenPost.');
            }
            // verify required parameter 'scope' is not null or undefined
            if (scope === null || scope === undefined) {
                throw new RequiredError('scope','Required parameter scope was null or undefined when calling loginAccessTokenApiV1LoginAccessTokenPost.');
            }
            // verify required parameter 'clientId' is not null or undefined
            if (clientId === null || clientId === undefined) {
                throw new RequiredError('clientId','Required parameter clientId was null or undefined when calling loginAccessTokenApiV1LoginAccessTokenPost.');
            }
            // verify required parameter 'clientSecret' is not null or undefined
            if (clientSecret === null || clientSecret === undefined) {
                throw new RequiredError('clientSecret','Required parameter clientSecret was null or undefined when calling loginAccessTokenApiV1LoginAccessTokenPost.');
            }
            const localVarPath = `/api/v1/login/access-token`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new URLSearchParams();


            if (grantType !== undefined) { 
                localVarFormParams.set('grant_type', grantType as any);
            }

            if (username !== undefined) { 
                localVarFormParams.set('username', username as any);
            }

            if (password !== undefined) { 
                localVarFormParams.set('password', password as any);
            }

            if (scope !== undefined) { 
                localVarFormParams.set('scope', scope as any);
            }

            if (clientId !== undefined) { 
                localVarFormParams.set('client_id', clientId as any);
            }

            if (clientSecret !== undefined) { 
                localVarFormParams.set('client_secret', clientSecret as any);
            }
            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded';
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams.toString();

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * LoginApi - functional programming interface
 * @export
 */
export const LoginApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Home
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async homeApiV1Get(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ModelObject>> {
            const localVarAxiosArgs = await LoginApiAxiosParamCreator(configuration).homeApiV1Get(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * OAuth2 compatible token login, get an access token for future requests
         * @summary Login Access Token
         * @param {string} grantType 
         * @param {string} username 
         * @param {string} password 
         * @param {string} scope 
         * @param {string} clientId 
         * @param {string} clientSecret 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async loginAccessTokenApiV1LoginAccessTokenPost(grantType: string, username: string, password: string, scope: string, clientId: string, clientSecret: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Token>> {
            const localVarAxiosArgs = await LoginApiAxiosParamCreator(configuration).loginAccessTokenApiV1LoginAccessTokenPost(grantType, username, password, scope, clientId, clientSecret, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * LoginApi - factory interface
 * @export
 */
export const LoginApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @summary Home
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        homeApiV1Get(options?: any): AxiosPromise<ModelObject> {
            return LoginApiFp(configuration).homeApiV1Get(options).then((request) => request(axios, basePath));
        },
        /**
         * OAuth2 compatible token login, get an access token for future requests
         * @summary Login Access Token
         * @param {string} grantType 
         * @param {string} username 
         * @param {string} password 
         * @param {string} scope 
         * @param {string} clientId 
         * @param {string} clientSecret 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        loginAccessTokenApiV1LoginAccessTokenPost(grantType: string, username: string, password: string, scope: string, clientId: string, clientSecret: string, options?: any): AxiosPromise<Token> {
            return LoginApiFp(configuration).loginAccessTokenApiV1LoginAccessTokenPost(grantType, username, password, scope, clientId, clientSecret, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * LoginApi - object-oriented interface
 * @export
 * @class LoginApi
 * @extends {BaseAPI}
 */
export class LoginApi extends BaseAPI {
    /**
     * 
     * @summary Home
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LoginApi
     */
    public homeApiV1Get(options?: any) {
        return LoginApiFp(this.configuration).homeApiV1Get(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * OAuth2 compatible token login, get an access token for future requests
     * @summary Login Access Token
     * @param {string} grantType 
     * @param {string} username 
     * @param {string} password 
     * @param {string} scope 
     * @param {string} clientId 
     * @param {string} clientSecret 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LoginApi
     */
    public loginAccessTokenApiV1LoginAccessTokenPost(grantType: string, username: string, password: string, scope: string, clientId: string, clientSecret: string, options?: any) {
        return LoginApiFp(this.configuration).loginAccessTokenApiV1LoginAccessTokenPost(grantType, username, password, scope, clientId, clientSecret, options).then((request) => request(this.axios, this.basePath));
    }
}
